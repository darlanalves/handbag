{"version":3,"file":"handbag.min.js","sources":["../src/index.js"],"sourcesContent":["const toString = Object.prototype.toString;\nconst INSTANTIATING = {};\nconst INJECTOR_FROZEN_ERROR = 'This injector is frozen and cannot be modified';\n\nconst is = {\n    array: (value) => {\n        return '[object Array]' === toString.call(value);\n    },\n\n    function: (value) => {\n        return typeof value === 'function';\n    },\n\n    object: (value) => {\n        return value !== null && typeof value === 'object';\n    }\n};\n\nconst FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n\n/**\n * Dependency Injection container\n */\nclass Injector {\n    constructor() {\n        this._reset();\n    }\n\n    /**\n     * @param {string} name\n     * @param {Object} [locals]     Map of injectables to override\n     */\n    get(name, locals = {}) {\n        if (is.array(name)) {\n            return name.map(function(item) {\n                return this.get(item, locals);\n            }, this);\n        }\n\n        if (name === 'handbag') {\n            return this;\n        }\n\n        let isInLocals = locals.hasOwnProperty(name);\n        if (!isInLocals && typeof locals.getOwnPropertySymbols === 'function') {\n            isInLocals = locals.getOwnPropertySymbols().indexOf(name) !== -1;\n        }\n\n        if (isInLocals) {\n            return locals[name];\n        }\n\n        const stack = this.$stack;\n\n        if (!this.has(name)) {\n            let error = 'Dependency not found: ' + name +\n                (stack.length ? ' (' + stack.join(' <- ') + ')' : '');\n\n            throw new Error(error);\n        }\n\n        return this._getResource(name, locals);\n    }\n\n    /**\n     * @param {string} name\n     * @param {Object} [locals]     Map of injectables to override\n     */\n    _getResource(name, locals) {\n        if (this.hasLocalProvider(name)) {\n            return this.getOrCreate(name, locals);\n        }\n\n        const injector = this.$children.find(i => i.hasLocalProvider(name));\n        return injector.getOrCreate(name, locals);\n    }\n\n    /**\n     * Get a value from cache or instantiate a value from registered provider\n     * @param {string} name\n     * @param {Object} [locals]     Map of injectables to override\n     * @private\n     */\n    getOrCreate(name, locals) {\n        const cache = this.$cache;\n        const stack = this.$stack;\n        const providers = this.$providers;\n\n        if (cache.has(name) && !this._isInstantiating(name)) {\n            return cache.get(name);\n        }\n\n        let error, value;\n        stack.push(name);\n\n        try {\n            if (this._isInstantiating(name)) {\n                throw new Error('Circular dependency found: ' + stack.join(' <- '));\n            }\n\n            cache.set(name, INSTANTIATING);\n            value = this.instantiate(providers.get(name), locals);\n            cache.set(name, value);\n        } catch (e) {\n            if (this._isInstantiating(name)) {\n                cache.delete(name);\n            }\n\n            error = e;\n        } finally {\n            stack.pop();\n        }\n\n        if (error) {\n            throw error;\n        }\n\n        if (true === this.$privates[name]) {\n            cache.delete(name);\n        }\n\n        console.log(name, value);\n\n        return value;\n    }\n\n    _isInstantiating(name) {\n        return this.$cache.get(name) === INSTANTIATING;\n    }\n\n    /**\n     * Check for a provider in this injector and all children\n     * @param {string} name\n     * @return {boolean}\n     */\n    has(name) {\n        return this.hasLocalProvider(name) || this.hasChildProvider(name);\n    }\n\n    /**\n     * Check for a provider only in this instance (not checking on children)\n     * @param {string} name\n     * @return {boolean}\n     */\n    hasLocalProvider(name) {\n        let v = this.$cache.has(name) || this.$providers.has(name);\n        return v;\n    }\n\n    /**\n     * Check for a provider in all children injectors\n     * @param {string} name\n     * @return {boolean}\n     */\n    hasChildProvider(name) {\n        var v= Boolean(this.$children.find(i => i.hasLocalProvider(name)));\n        return v;\n    }\n\n    /**\n     * Register a provider for a value meant to be a singleton instance\n     * @param {string} name\n     * @param {Function|Class} value\n     */\n    provideShared(name, value) {\n        return this.provide(name, value, true);\n    }\n\n    /**\n     * Register a provider for a value meant to be recreated everytime it is required\n     * @param {string} name\n     * @param {Function|Class} value\n     */\n    provideNotShared(name, value) {\n        return this.provide(name, value, false);\n    }\n\n    /**\n     * Register a provider for a value\n     * @param {string} name\n     * @param {Function|Class} value\n     * @param {boolean} isShared\n     */\n    provide(name, value, isShared = true) {\n        if (this.$frozen) {\n            throw new Error(INJECTOR_FROZEN_ERROR);\n        }\n\n        if (is.array(value)) {\n            let provider = value[value.length - 1];\n\n            if (!is.function(provider)) {\n                throw new Error('Invalid provider for ' + name);\n            }\n\n            this._register(name, value, isShared);\n            return this;\n        }\n\n        if (is.function(value)) {\n            let provider = this._parseDependencies(value);\n            provider.push(value);\n\n            this._register(name, provider, isShared);\n            return this;\n        }\n\n        this.constant(name, value);\n        return this;\n    }\n\n    /**\n     * Provider to any value that won't change during the injector lifecycle\n     * @param {string} name\n     * @param {*} value\n     */\n    constant(name, value) {\n        if (this.$frozen) {\n            throw new Error(INJECTOR_FROZEN_ERROR);\n        }\n\n        this.$cache.set(name, value);\n        return this;\n    }\n\n    /**\n     * @param {Function} Type\n     * @param {Object} [locals]\n     */\n    instantiate(Type, locals) {\n        var Constructor = function() {},\n            instance, returnedValue;\n\n        Constructor.prototype = (is.array(Type) ? Type[Type.length - 1] : Type).prototype;\n\n        instance = new Constructor();\n        returnedValue = this.invoke(Type, instance, locals);\n        instance = (is.object(returnedValue) || is.function(returnedValue)) ? returnedValue : instance;\n\n        return instance;\n    }\n\n    /**\n     * @param {Function|Array} invokable    Either a function or an array with dependencies and a function\n     * @param {Object} context\n     * @param {Object} [locals]\n     *\n     * @example\n     *\n     * function fn(foo) {}\n     * const context = {};\n     *\n     * handbag.invoke(fn, context, { foo: 1 });\n     * handbag.invoke(['foo', fn], context, { foo: 1 });\n     */\n    invoke(invokable, context, locals) {\n        let _invokable;\n\n        if (is.array(invokable)) {\n            _invokable = this._getInvokableFromArray(invokable);\n        } else if (is.function(invokable)) {\n            _invokable = this._getInvokableFromFunction(invokable);\n        }\n\n        if (!(_invokable && _invokable.method)) {\n            throw new Error('Invalid invokable value');\n        }\n\n        let { dependencies } = _invokable;\n\n        if (dependencies.length) {\n            dependencies = this.get(dependencies, locals);\n        }\n\n        return _invokable.method.apply(context || null, dependencies);\n    }\n\n    _getInvokableFromArray(array) {\n        let dependencies = array.slice(0);\n        let method = dependencies.pop();\n\n        if (!is.function(method)) {\n            method = null;\n        }\n\n        return { dependencies, method };\n    }\n\n    _getInvokableFromFunction(fn) {\n        let dependencies = fn.$inject || this._parseDependencies(fn);\n\n        return { dependencies, method: fn };\n    }\n\n    _annotateConstructor() {\n        var args = Array.from(arguments),\n            Constructor = args.pop();\n\n        Constructor.$inject = args;\n\n        return Constructor;\n    }\n\n    _parseDependencies(fn) {\n        var match = fn.toString().match(FN_ARGS),\n            fnArgs = match && match[1];\n\n        return fnArgs && fnArgs.split(',').map(function(arg) {\n            return arg.trim();\n        }) || [];\n    }\n\n    _register(name, provider, isShared) {\n        if (this.$providers.has(name)) {\n            throw new Error('Cannot register a dependency that already exists: ' + name);\n        }\n\n        const value = this._annotateConstructor.apply(null, provider);\n        this.$providers.set(name, value);\n\n        if (!isShared) {\n            this.$privates[name] = true;\n        }\n    }\n\n    /**\n     * Lock this injector to prevent any further registration of values\n     */\n    freeze() {\n        this.$frozen = true;\n    }\n\n    /**\n     * Reset all the values declared in this injector\n     * @private\n     */\n    _reset() {\n        this.$cache = new Map();\n        this.$providers = new Map();\n        this.$privates = {};\n        this.$stack = [];\n        this.$children = [];\n    }\n\n    /**\n     * @param {Injector} injector\n     */\n    addInjector(injector) {\n        this.$children.push(injector);\n    }\n\n    /**\n     * @return {Injector}\n     */\n    static createInjector() {\n        return new Injector();\n    }\n}\n\nexport default Injector;\n"],"names":["toString","Object","prototype","INSTANTIATING","INJECTOR_FROZEN_ERROR","is","value","call","FN_ARGS","Injector","_reset","name","locals","array","map","item","this","get","isInLocals","hasOwnProperty","getOwnPropertySymbols","indexOf","stack","$stack","has","error","length","join","Error","_getResource","hasLocalProvider","getOrCreate","injector","$children","find","i","cache","$cache","providers","$providers","_isInstantiating","push","set","instantiate","e","pop","$privates","log","hasChildProvider","v","Boolean","provide","isShared","$frozen","provider","_register","_provider","_parseDependencies","constant","Type","instance","returnedValue","Constructor","invoke","object","invokable","context","_invokable","_getInvokableFromArray","_getInvokableFromFunction","method","dependencies","apply","slice","fn","$inject","args","Array","from","arguments","match","fnArgs","split","arg","trim","_annotateConstructor","Map"],"mappings":"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"}